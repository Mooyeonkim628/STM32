.cpu cortex-m0
.thumb
.syntax unified
.fpu softvfp

.global login
login: .string "kim3244"
hello_str: .string "Hello, %s!\n"
.align  2
.global hello
hello:
	push {lr}
	bl serial_init
	ldr  r0, =hello_string
	ldr  r1, =login
	bl   printf
	pop  {pc}

showmult2_str: .string "%d * %d = %d\n"
.align  2
.global showmult2
showmult2:
	push {lr}
	bl serial_init
	movs r2, r1
	movs r1, r0
	movs r3, r1
	muls r3, r2
	ldr  r0, =showmult2_str
	bl   printf
	pop  {pc}

showmult3_str: .string "%d * %d * %d = %d\n"
.align  2
.global showmult3
showmult3:
	push {r4-r7, lr}
	bl serial_init
	movs r3, r2
	movs r2, r1
	movs r1, r0
	movs r4, r1
	muls r4, r3
	muls r4, r2
	ldr  r0, =showmult3_str
	bl   printf
	pop  {r4-r7, pc}

listing_str: .string "%s %05d %s %d students in %s, %d\n"
.align  2
.global listing
listing:
	push {r4-r7, lr}
	bl serial_init
	ldr  r6, [sp,#24]
	ldr  r5, [sp,#20]
	movs r4, r3
	ldr  r3, [r2]
	movs r2, r1
	ldr  r1, [r0]
	ldr  r0, =listing_str
	bl   printf
	pop  {r4-r7, pc}

.global trivia
trivia:
	push {r4-r7, lr}
	bl serial_init
	sub  sp,#400
	mov  r7,sp
trivia_for:
	movs r4,#0
trivia_check:
	cmp  r4, #100
	bge  trivia_end
trivia_body:
	lsls r4, r4, #2
	ldr  r1, [r7, r4]
	adds r1, #1
	str  r1, [r7, r4]
	lsrs r4, r4, #2
trivia_next:
	adds r4, #1
	b    trivia_check
trivia_end:
trivia_if:
	cmp  r0, #100
	blt  trivia_else
	movs r0, #99
	b    trivia_end2
trivia_else:
trivia_end2:
	lsls r0, r0, #2
	ldr  r1, [r7, r0]
	movs r0, r1
	pop  {r4-r7, pc}

.global reverse_puts
hello:
	push {r4-r7,lr}
	bl serial_init
	subs r1, sp, r0


	pop  {r4-r7,pc}

.global my_atoi
hello:
	push {r4-r7,lr}
	bl serial_init

	pop  {r4-r7,pc}

.global fadd
hello:
	push {r4-r7,lr}
	bl serial_init

	pop  {r4-r7,pc}

